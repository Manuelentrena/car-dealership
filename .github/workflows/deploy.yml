name: Deploy NestJS to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # - name: Set lowercase owner name repository
      #   run: |
      #     echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
      #   env:
      #     OWNER: '${{ github.repository_owner }}'

      - name: Set lowercase repository name
        run: |
          echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Debug OWNER_LC
        run: |
          echo "OWNER_LC is: ${{ env.REPO_LC }}"

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      
      - name: Extract release version
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${OWNER_LC}
          tags: |
            type=sha
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
      
      - name: Debug extracted tags
        run: |
          echo "Generated tags: ${{ steps.meta.outputs.tags }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${OWNER_LC}/nestjs-app:latest,${OWNER_LC}/nestjs-app:${{ steps.meta.outputs.tags }}
          file: docker/dockerfile.prod.yml
          build-args: |
            MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
            MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
            MONGO_PORT=${{ secrets.MONGO_PORT }}
            MONGO_HOST=${{ secrets.MONGO_HOST }}
            MONGO_EXPRESS_PORT=${{ secrets.MONGO_EXPRESS_PORT }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            PORT=${{ secrets.PORT }}

      # - name: Build Docker image
      #   run: |
      #     docker build --no-cache \
      #       --build-arg MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }} \
      #       --build-arg MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }} \
      #       --build-arg MONGO_PORT=${{ secrets.MONGO_PORT }} \
      #       --build-arg MONGO_HOST=${{ secrets.MONGO_HOST }} \
      #       --build-arg MONGO_EXPRESS_PORT=${{ secrets.MONGO_EXPRESS_PORT }} \
      #       --build-arg MONGO_DB=${{ secrets.MONGO_DB }} \
      #       --build-arg PORT=${{ secrets.PORT }} \
      #       -t ghcr.io/${OWNER_LC}/nestjs-app:latest \
      #       -f docker/dockerfile.prod.yml .

      - name: Push Docker image to GitHub Packages
        run: |
          docker push ghcr.io/${OWNER_LC}/nestjs-app:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            IMAGE="ghcr.io/${OWNER_LC}/nestjs-app:latest"
            echo "Logging into GitHub Packages..."
            echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pulling the latest image..."
            docker pull $IMAGE

            echo "Change path of proyect"
            cd ${{ secrets.VPS_PATH }}

            echo "Updating docker-compose.prod.yml file..."
            git fetch origin
            git checkout origin/main -- docker-compose.prod.yml

            echo "Stopping and removing the old nestjs-app container..."
            docker-compose -f docker-compose.prod.yml stop nestjs-app
            docker-compose -f docker-compose.prod.yml rm -f nestjs-app
      
            echo "Starting the new nestjs-app container..."
            docker-compose -f docker-compose.prod.yml up -d --no-deps --force-recreate nestjs-app
      
            echo "Cleaning up old images..."
            docker image prune -f
