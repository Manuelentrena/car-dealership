name: Deploy NestJS to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # - name: Set lowercase owner name repository
      #   run: |
      #     echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
      #   env:
      #     OWNER: '${{ github.repository_owner }}'

      - name: Set lowercase repository name
        run: |
          echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Debug REPO_LC
        run: |
          echo "REPO_LC is: ${{ env.REPO_LC }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      

      - name: Get Version
        uses: PaulHatch/semantic-version@v5.0.3
        id: version
        with:
          major_pattern: "major:"
          minor_pattern: "feat:"
          search_commit_body: true
          bump_each_commit: true
          version_format: "v${major}.${minor}.${patch}"

      - name: Build Docker image
        env:
          TAG: ${{ steps.version.outputs.version }}
        run: |
          docker build --no-cache \
            --build-arg MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }} \
            --build-arg MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }} \
            --build-arg MONGO_PORT=${{ secrets.MONGO_PORT }} \
            --build-arg MONGO_HOST=${{ secrets.MONGO_HOST }} \
            --build-arg MONGO_EXPRESS_PORT=${{ secrets.MONGO_EXPRESS_PORT }} \
            --build-arg MONGO_DB=${{ secrets.MONGO_DB }} \
            --build-arg PORT=${{ secrets.PORT }} \
            -t ghcr.io/${{ env.REPO_LC }}/nestjs-app:$TAG \
            -t ghcr.io/${{ env.REPO_LC }}/nestjs-app:latest \
            -f docker/dockerfile.prod.yml .

      - name: Push Docker image to GitHub Packages
        env:
          TAG: ${{ steps.version.outputs.version }}
        run: |
          docker push ghcr.io/${{ env.REPO_LC }}/nestjs-app:$TAG
          docker push ghcr.io/${{ env.REPO_LC }}/nestjs-app:latest

      - name: Deploy to VPS
        env:
          TAG: ${{ steps.version.outputs.version }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            IMAGE="ghcr.io/${{ env.REPO_LC }}/nestjs-app:latest"
            echo "Logging into GitHub Packages..."
            echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pulling the latest image..."
            docker pull $IMAGE

            echo "Change path of proyect"
            cd ${{ secrets.VPS_PATH }}

            echo "Updating docker-compose.prod.yml file..."
            git fetch origin
            git checkout origin/main -- docker-compose.prod.yml

            echo "Stopping and removing the old nestjs-app container..."
            docker-compose -f docker-compose.prod.yml stop nestjs-app
            docker-compose -f docker-compose.prod.yml rm -f nestjs-app
      
            echo "Starting the new nestjs-app container..."
            docker-compose -f docker-compose.prod.yml up -d --no-deps --force-recreate nestjs-app
      
            echo "Cleaning up old images..."
            docker image prune -f

      - name: Clean up old Docker images in GitHub Packages
        uses: actions/delete-package-versions@v5
        with:
          owner: ${{ github.repository_owner }}  # Nombre del propietario del repositorio
          package-name: ${{ env.REPO_LC }}  # Nombre del paquete (en este caso tu repositorio de Docker)
          package-type: 'container'  # Tipo de paquete, en este caso 'container' para Docker
          token: ${{ secrets.GH_TOKEN }}  # Token de autenticación con permisos de eliminar paquetes
          min-versions-to-keep: 3  # Mantener las 3 últimas versiones
